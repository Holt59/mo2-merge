import os.path

Import('qt_env')

env = qt_env.Clone()

modules = [
    'Script',
    'Core',
    'Gui'
]

if env['QT_MAJOR_VERSION'] > 4:
    modules += [
        'Widgets',
        'Qml',
        'Quick',
        'WebKitWidgets'
    ]
else:
    modules += [
        'Declarative'
    ]

env.EnableQt4Modules(['Qt' + n for n in modules],
                     debug = env['CONFIG'] == 'debug')
env['QT4_AUTOSCAN_STRATEGY'] = 1
env.Uic4(Glob('*.ui'))

env.AppendUnique(LIBS = ['user32', 'shell32', 'ole32'])

# We have to 'persuade' moc to generate certain other targets and inject them
# into the list of cpps
targets = env.AddExtraMoc(env.Glob('*.h'))

# Note the order of this is important, or you can pick up the wrong report.h...
env.AppendUnique(CPPPATH = [
    '.',            # Why is this necessary?
    '$BOOST_PATH',
])
env.AppendUnique(CPPDEFINES = [
    'UIBASE_LIBRARY',
    'UIBASE_EXPORT'
])

#CONFIG(debug, debug|release) {
#} else {
#  QMAKE_CXXFLAGS += /Zi /GL
#  QMAKE_LFLAGS += /DEBUG /LTCG /LARGEADDRESSAWARE /OPT:REF /OPT:ICF
#}

lib = env.SharedLibrary('uibase', env.Glob('*.cpp') + targets)

env.Install(env['INSTALL_PATH'],
            filter(lambda x: str(x).endswith('.dll') or str(x).endswith('.pdb'),
                   lib))

